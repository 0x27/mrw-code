// Blink LEDs at a rate specified by the value of the readings on the incoming CC streams.

#define GREEN 12 //the pin for the red LED relay - to pair with L_topic
#define RED 13 //the pin for the green LED relay - to pair with R_topic

byte inByte = 0; // incoming bytes from Serial
char buffer[5] ; // buffer for Serial??
int pointer = 0; // character in the buffer after the marker (L or R)

int reading = 0; //value constructed as an int from what was in the serial buffers
int L_reading = 1000; //value to be used by Arduino for GREEN
int R_reading = 1000; //value to be used by Arduino for RED

int greenState = 0; // current state of green LED relay
int redState = 0; // current state of red LED relay
unsigned long greenTime = 0; // The current number of milliseconds since Arduino reset.
unsigned long redTime = 0; // The current number of milliseconds since Arduino reset.



void setup(){
  Serial.begin(9600); // open the serial port

  pinMode(GREEN, OUTPUT); // green LED relay is an output
  pinMode(RED, OUTPUT); // red LED relay is an output


  // Note: Analogue pins are automatically set as inputs

}




void loop(){

//  Serial.println("hello");


  
  //getting the readings from Serial
  if (Serial.available() >0) {

    
    // read the incoming byte
    inByte = Serial.read();
    
//    Serial.println(inByte);
    
    // If the marker (L) is found, next 4 characters are the reading
    if (inByte=='L' || inByte=='R') {
      
     while (pointer < 4) { // accumulate 4 chars
        buffer[pointer] = Serial.read(); // store in the buffer
        pointer++; // move the pointer forward by 1

      }
      
      pointer = 0;
      
      while (pointer < 4) { // accumulate 4 chars
        buffer[pointer] = buffer[pointer] - '0'; // store in the buffer and convert to int from char
        pointer++; // move the pointer forward by 1

      }
      
      reading = (buffer[0] * 1000) + (buffer[1] * 100) + (buffer[2] * 10) + (buffer[3]);
      
      Serial.println(reading);
      
      if (inByte == 'L') {
        
        // construct the 4 digits into a single 4-digit reading for GREEN
        L_reading = reading;
        
      }
      
      else {
        
        // construct the 4-digit reading for RED
        R_reading = reading;
        
      }
      
    }
    
  }
  
  // Sending the readings to Arduino
  if ((millis() - greenTime) >= L_reading) {

    if (greenState == 0) {
      digitalWrite(12, HIGH); //turn the LED relay on
    }
    else {
      digitalWrite(12, LOW); // turn the LED relay off
    }

    greenState = 1 - greenState;    
    
    greenTime = millis();

  }
  
  if ((millis() - redTime) >= R_reading) {

    if (redState == 0) {
      digitalWrite(13, HIGH); //turn the LED relay on
    }
    else {
      digitalWrite(13, LOW); // turn the LED relay off
    }

    redState = 1 - redState;

    redTime = millis();
    
  }
    
}

